package com.powernode.crm.workbench.mapper;


import com.powernode.crm.workbench.pojo.Activity;

import java.util.List;
import java.util.Map;

public interface ActivityMapper {
    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tbl_activity
     *
     * @mbggenerated Sun Oct 22 20:17:24 CDT 2023
     */
    int deleteByPrimaryKey(String id);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tbl_activity
     *
     * @mbggenerated Sun Oct 22 20:17:24 CDT 2023
     */
    int insertActivity(Activity activity);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tbl_activity
     *
     * @mbggenerated Sun Oct 22 20:17:24 CDT 2023
     */
    int insertSelective(Activity record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tbl_activity
     *
     * @mbggenerated Sun Oct 22 20:17:24 CDT 2023
     */
    Activity selectByPrimaryKey(String id);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tbl_activity
     *
     * @mbggenerated Sun Oct 22 20:17:24 CDT 2023
     */
    int updateByPrimaryKeySelective(Activity record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tbl_activity
     *
     * @mbggenerated Sun Oct 22 20:17:24 CDT 2023
     */
    int updateByPrimaryKey(Activity record);
    List<Activity> selectActivityByConditionForPage(Map<String,Object> map);
    int selectCountActivityByCondition(Map<String,Object> map);
    int deleteActivityByIds(String[] ids);

    /**
     * 根据id查询市场活动信息
     * @param id
     * @return
     */
    Activity selectActivityById(String id);
    int updateActivityById(Activity activity);
    List<Activity> selectAll();

    /***
     * 批量保存市场活动
     * @param list
     * @return
     */
    int insertActivityByList(List<Activity> list);
    Activity selectActivityDetailById(String id);

    /**
     * 根据cludId查询该线索相关联的市场活动的明细信息
     * @param clueId
     * @return
     */
    List<Activity> selectActivityForDetailByClueId(String clueId);

    /**
     * 根据name模糊查询市场活动，并且将于clueId关联过的市场活动排除
     * @param map
     * @return
     */
    List<Activity> selectActivityForDetailByNameClueId(Map<String,Object> map);
    List<Activity> selectActivityForDetailByIds(String[] ids);
    List<Activity> selectActivityByActivityNameClueId(Map<String,Object> map);

}